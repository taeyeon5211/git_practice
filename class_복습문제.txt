Quiz static, stack , 생성자 private, instance, (method area, Heap Area, Stack Area, Runtime Constant Pool)

1. 3
2. 4
3. 4
4. 3
5. 1
6. 3
7. 2
8. 2
9. 2
10. 4
11. 3
12. 필드, 생성자, 메소드
13. & 14.
package day12.class_review;

class Member {
    private String name;
    private String id;
    private String password;
    private int age;

    public Member(String name, String id) {
        this.name = name;
        this.id = id;
    }
}

public class MemberMain {
    public static void main(String[] args) {
        Member user1 = new Member("홍길동", "hong");
    }
}
15.
package day12.class_review;

class Member {
    private String name;
    private String id;
    private String password;
    private int age;

/*
    public Member(String name, String id) {
        this.name = name;
        this.id = id;
    }
*/

    public Member(String id, String password) {
        this.id = id;
        this.password = password;
    }

    public String getId() {
        return id;
    }

    public String getPassword() {
        return password;
    }
}

class MemberService {

    public static boolean login(Member member) {
        if (member.getId() == "hong" && member.getPassword() == "12345") {
            return true;
        } else {
            return false;
        }
    }

    public static void logout(Member member) {
        System.out.println(member.getId() + " 님 로그아웃 되었습니다.");
    }
}

public class MemberMain {
    public static void main(String[] args) {
        Member user1 = new Member("hong", "12345");
        MemberService ms = new MemberService();
        boolean result = ms.login(user1);

        if (result) {
            System.out.println("로그인 되었습니다.");
            ms.logout(user1);
        } else {
            System.out.println("id 또는 password가 올바르지 않습니다.");
        }


    }
}
16. & 17.
package day12.class_review;

public class Printer {
    private int intValue;
    private String stringValue;
    private double doubleValue;
    private boolean booleanValue;

    public void println(int intValue) {
        System.out.println(intValue);
    }
    public void println(String stringValue) {
        System.out.println(stringValue);
    }
    public void println(double doubleValue) {
        System.out.println(doubleValue);
    }
    public void println(boolean booleanValue) {
        System.out.println(booleanValue);
    }

    public static void main(String[] args) {
        Printer printer = new Printer();
        printer.println(10);
        printer.println(true);
        printer.println(5.7);
        printer.println("홍길동");
    }
}
18.
package day12.class_review;

public class ShopService {

    private static ShopService shopService = new ShopService();

    private ShopService() {

    }

    public static ShopService getInstance() {
        return shopService;
    }

    public static void main(String[] args) {
        ShopService ob1 = ShopService.getInstance();
        ShopService ob2 = ShopService.getInstance();

        if (ob1 == ob2) {
            System.out.println("같은 ShopService 객체 입니다.");
        } else {
            System.out.println("다른 ShopService 객체 입니다.");
        }
    }
}

19.
package day12.class_review;

public class Account {

    private int balance;
    public final int MAX_BALANCE = 1000000;
    public final int MIN_BALANCE = 0;

    public int getBalance() {
        return balance;
    }

    public int setBalance(int balance) {
        if (balance >= MIN_BALANCE && balance <= MAX_BALANCE) {
            this.balance = balance;
        }
        return this.balance;
    }

    public static void main(String[] args) {
        Account account = new Account();

        account.setBalance(10000);
        System.out.println("현재 잔고 : " + account.getBalance());

        account.setBalance(-100);
        System.out.println("현재 잔고 : " + account.getBalance());

        account.setBalance(2000000);
        System.out.println("현재 잔고 : " + account.getBalance());

        account.setBalance(300000);
        System.out.println("현재 잔고 : " + account.getBalance());

    }
}

20.
package day12.class_review;

public class Account {

    private String balanceNumber;
    private String name;
    private int balance;

    public Account(String balanceNumber, String name, int balance) {
        this.balanceNumber = balanceNumber;
        this.name = name;
        this.balance = balance;
    }

    public int getBalance() {
        return balance;
    }

    public void plusBalance(int balance) {
        this.balance += balance;
    }

    public void minusBalance(int balance) {
        this.balance -= balance;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBalanceNumber() {
        return balanceNumber;
    }

    public void setBalanceNumber(String balanceNumber) {
        this.balanceNumber = balanceNumber;
    }
}

package day12.class_review;

import java.util.Scanner;

public class BankApplication {
    static Scanner sc = new Scanner(System.in);
    static Account[] accounts = new Account[100];
    static int index = 0;
    static boolean quit = false;


    public static void main(String[] args) {

        while (!quit) {
            System.out.println("-".repeat(50));
            System.out.println("1.계좌생성 | 2.계좌목록 | 3. 예금 | 4. 출금 | 5. 종료 |");
            System.out.println("-".repeat(50));
            System.out.print("선택 > ");
            int cmd = sc.nextInt();
            switch (cmd) {
                case 1:
                    makeAccount();
                    break;
                case 2:
                    showAccounts();
                    break;
                case 3:
                    deposit();
                    break;
                case 4:
                    withdrawal();
                    break;
                case 5:
                    isQuit();
                    break;
            }
        }
    }

    private static void withdrawal() {
        System.out.println("-".repeat(3));
        System.out.println("출금");
        System.out.println("-".repeat(3));
        System.out.print("계좌 번호 : ");
        String balanceNumber = sc.next();
        System.out.print("출금액 : ");
        int balance = sc.nextInt();
        for (Account account : accounts) {
            if (account == null) {
                break;
            }
            if (balanceNumber.equals(account.getBalanceNumber())) {
                if (balance < 0) {
                    System.out.println("출금액은 0보다 커야 됩니다.");
                } else {
                    if (balance > account.getBalance()) {
                        System.out.println("계좌에 잔액이 부족합니다.");
                        break;
                    } else {
                        account.minusBalance(balance);
                        System.out.println("출금이 성공되었습니다.");
                    }
                }
            }
        }
    }

    private static boolean isQuit() {
        System.out.print("프로그램 종료");
        quit = true;
        return quit;
    }

    private static void deposit() {
        System.out.println("-".repeat(3));
        System.out.println("예금");
        System.out.println("-".repeat(3));
        System.out.print("계좌 번호 : ");
        String balanceNumber = sc.next();
        System.out.print("예금액 : ");
        int balance = sc.nextInt();
        for (Account account : accounts) {
            if (account == null) {
                break;
            }
            if (balanceNumber.equals(account.getBalanceNumber())) {
                account.plusBalance(balance);
            }
        }
    }

    private static void showAccounts() {
        System.out.println("-".repeat(6));
        System.out.println("계좌목록");
        System.out.println("-".repeat(6));
        for (Account account : accounts) {
            if (account == null) {
                break;
            }
            System.out.println(account.getBalanceNumber() + " " + account.getName() + " " + account.getBalance());
        }
    }

    private static void makeAccount() {
        System.out.println("-".repeat(6));
        System.out.println("계좌생성");
        System.out.println("-".repeat(6));
        System.out.print("계좌번호 : ");
        String balanceNumber = sc.next();
        for (Account account : accounts) {
            if (account != null) {
                if (balanceNumber.equals(account.getBalanceNumber())) {
                    System.out.println("이미 존재하는 계좌번호 입니다.");
                    return;
                }
            }
        }
        System.out.print("계좌주 : ");
        String name = sc.next();
        System.out.print("초기입금액 : ");
        int balance = sc.nextInt();
        accounts[index++] = new Account(balanceNumber, name, balance);
        System.out.println("결과: 계좌가 생성되었습니다.");
    }
}

